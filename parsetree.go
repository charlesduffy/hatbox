package main
//import "fmt"
import "log"

//Parse tree node types enumeration
//TODO: figure out a way to encapsualte this in 
//a more idiomatic fashion

type nodetype int
type datumtype int

// Node types are autogenerated from gram.y in Makefile

// Parse tree "wrapper" struct
type children []Pnode		//TODO consider if this is really necessary

type ptree struct {
	tree	children
	query	string
}

// Parse tree node
type Pnode struct {
	tag	int
	tree	[]Pnode
	val	*Expr
}

// Expression tree
type Expr struct {
	data	Datum
	left	*Expr
	right	*Expr
}

// Datum interface
// Need to add some methods here 
// but leave it blank for the time being

type Datum struct {
	value	datumval
	dtype	datumtype
}

func (p *Pnode) append_node(n Pnode) {
	p.tree = append(p.tree, n)
}

func make_identifier(i string) Datum {
	return Datum{
				value: i,
				dtype: IDENTIFIER}
}


func make_scalar_expr(d Datum, l *Expr , r *Expr) *Expr {
	return &Expr{
			data: d,
			left: l,
			right: r}
}


//func Walk_ptree(t ptree) {
//	for _ , p := range t.tree {
//	  p.walk_pnode()
//	}
//}

type PUserFunc func(Pnode) (bool, Pnode)

func (t Pnode) walk_pnode(fn PUserFunc, depth int) (bool, Pnode) {

	//traverse 'tree' slice left-depth first
	log.Printf("Entering walk_pnode %d %s %d %+v ",depth, typName(t.tag), t.tag, t.val)
	var p Pnode

	ret , q := fn(t)
	if ( ret == true ) {
		 return true, q
	}

	if (t.tree != nil) {
		for _ , p = range t.tree {

			ret , q = p.walk_pnode(fn, depth+1)

			if (ret == true) {
				return true, q
			}
		}
	}


	//print the current node
	return false, q

}

func typName(t int) string {
	return NodeYNames[t]
}


//This gets the list of tables that we need to scan from. 
//Produces a table with relation catalogue name , schema name , 
//relation name , alias , projection list

func (t Pnode) getRangeTable() RangeTable {

	var f = func(l Pnode)(bool,Pnode){
		log.Print("calling func\n")
		log.Printf("fn: current pnode: %s %d %+v ",typName(l.tag), l.tag, l.val)
		return false,Pnode{}
	}
// 1. make a new empty RangeTable
	rt := make(RangeTable, 5)
// 2. traverse the parse tree until we get to the from_clause
	_, a := t.walk_pnode(f,0)
	log.Printf("%+v\n", a)
// 3. iterate over the table_ref objects in the from_clause
// 4. for each table_ref object, make a TRange and Append() it 
//    to the RangeTable
// 5. When we're finished, return the RangeTable
return rt
}

func (t Pnode) getSelection() SelectionTable {

return nil
}

func (t Pnode) getProjection() ProjectionTable {

return nil
}

